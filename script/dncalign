#!/usr/bin/perl
use strict;
use threads;
use warnings;
use Bio::SeqIO;
use File::Copy;
use File::Spec;
use File::Temp 'tempdir';
use Getopt::Long;
use Bio::Phylo::Util::Logger ':levels';

# process command line arguments
my $infile;
my $chunks      = 20;
my $verbosity   = INFO;
my $muscle      = 'muscle';
my $outfile;
my $yml;
GetOptions(
	'infile=s'  => \$infile,
	'chunks=i'  => \$chunks,
	'verbose+'  => \$verbosity,	
	'outfile=s' => \$outfile,
	'yml=s'     => \$yml,
	'muscle=s'  => \$muscle,
);

# default name
$outfile = $infile . '.out' if not $outfile;

# instantiate services
Bio::Phylo::Util::Logger->new(
	'-class'    => 'main',
	'-level'    => $verbosity,
);

my $in = Bio::SeqIO->new(
	'-file'     => $infile,
	'-format'   => 'fasta',
); 

# prepare temp dir and file stem
my $dir = tempdir();
my ( $v, $d, $base ) = File::Spec->splitpath( $infile );

# start chunking
INFO "starting to split $infile into chunks of $chunks sequences";
my $counter  = 1;
my @files    = ( "${dir}/${base}.${counter}" );
my $out      = Bio::SeqIO->new(
	'-file'   => '>' . $files[-1],
	'-format' => 'fasta',
);
while( my $seq = $in->next_seq ) {
	$out->write_seq($seq);
	if ( ( $counter++ % $chunks ) == 0 ) {
		DEBUG "next chunk at seq $counter";
		push @files, "${dir}/${base}.${counter}";
		$out = Bio::SeqIO->new(
			'-file'   => '>' . $files[-1],
			'-format' => 'fasta',
		);
	}
}

# do the initial alignment
INFO "launching alignment threads";
my @threads  = map { sleep(5); threads->create( \&align, $_ ) } @files;
my @outfiles = map { $_->join } @threads;

# do the profiles
my $master = "${dir}/profile.aln.fasta";
copy( $outfiles[0], $master );
for my $i ( 1 .. $#outfiles ) {
	my $addition = $outfiles[$i];
	my $out      = $master . '.tmp';
	system( "$muscle -quiet -profile -in1 $master -in2 $addition > $out" );
	copy( $out, $master );
#	unlink( $out );
}
copy( $master, $outfile );
#unlink( $master );

sub align {
	my $infile = shift;
	my $aligned = `alncipres -i $infile -y $yml -v`;
	my $outfile = "${infile}.out";
	open my $fh, '>', $outfile or die $!;
	print $fh $aligned;
	close $fh;
	return $outfile;
}
